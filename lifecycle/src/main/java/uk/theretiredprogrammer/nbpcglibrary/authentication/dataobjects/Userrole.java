/*
 * Copyright 2015-2017 Richard Linsdale.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package uk.theretiredprogrammer.nbpcglibrary.authentication.dataobjects;

import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;
import org.openide.util.Lookup;
import org.openide.util.lookup.ServiceProvider;
import static uk.theretiredprogrammer.nbpcglibrary.authentication.dataobjects.Userrole.UserroleField;
import uk.theretiredprogrammer.nbpcglibrary.api.*;
import uk.theretiredprogrammer.nbpcglibrary.common.*;
import uk.theretiredprogrammer.nbpcglibrary.data.entity.*;
import uk.theretiredprogrammer.nbpcglibrary.data.entityreferences.*;

/**
 * The Userrole Entity.
 *
 * (Class generated by NetBeans Platform Code Generator tools using script.xml.
 * Do not edit this file. Apply any changes to the definition file and
 * regenerate all files.)
 *
 * @author Richard Linsdale (richard at theretiredprogrammer.uk)
 */
public class Userrole extends Entity<Integer, Userrole, User, UserroleField> {

    /**
     * the Userrole field identifiers
     */
    public enum UserroleField {
        /**
         * the role field
         */
        ROLE,
        /**
         * the user field
         */
        USER,
    }
    
    private final Rules entityRules = new Rules();
    private final EntityReference<Integer, Role, Application> role;
    private final Rules roleRules = new Rules();
    private final EntityReference<Integer, User, UserRoot> user;
    private final Rules userRules = new Rules();
    private int id = 0;
    private String createdby = "";
    private final Timestamp createdon = new Timestamp();
    private String updatedby = "";
    private final Timestamp updatedon = new Timestamp();

    /**
     * Constructor - Userrole.
     *
     * @param id the unique id for this entity
     * @param em - the entity manager for this entity type
     */
    public Userrole(int id, Userrole.EM em) {
        super("Userrole[" + Integer.toString(id) + "]", "key", em);
        this.id = id;
        role = new EntityReference<>("Userrole>Role", Role.getEM(), new ReferencedEntityTitleChangeListener("Userrole>Role"));
        addRule(roleRules, role.getDefinedRule());
        user = new EntityReference<>("Userrole>User", User.getEM());
        addRule(userRules, user.getDefinedRule());
        checkRulesAtLoad(new StringBuilder());
    }
    
    @Override
    public boolean isPersistent() {
        return id > 0;
    }
    
    @Override
    public final Integer getPK() {
        return getId();
    }

    /**
     * Get all rules for this entity
     *
     * @return the set of rules
     */
    public final Rules getEntityRules() {
        return entityRules;
    }
    
    @Override
    public final String instanceDescription() {
        if (role == null) {
            return LogBuilder.instanceDescription(this, Integer.toString(getId()));
        }
        Role e = role.getNoLoad();
        return e != null
                ? LogBuilder.instanceDescription(this, Integer.toString(getId()) + ":" + e.instanceDescription())
                : LogBuilder.instanceDescription(this, Integer.toString(getId()));
    }

    /**
     * Get the role field rules.
     *
     * @return the rules
     */
    public Rules getRoleRules() {
        return roleRules;
    }

    /**
     * Get the Role Entity associated with this entity.
     *
     * @return the Role entity
     */
    public Role getRole() {
        return role.get();
    }

    /**
     * Set the Role Entity associated with this entity.
     *
     * @param e the role entity
     */
    public void setRole(Role e) {
        if (e == null) {
            if (role.getPK() != null) {
                ensureEditing();
                if (role.set()) {
                    fireFieldChange(UserroleField.ROLE);
                    fireNameAndOrTitleChangeOnRole();
                }
            }
        } else if (!e.getPK().equals(role.getPK())) {
            ensureEditing();
            if (role.set(e.getPK())) {
                fireFieldChange(UserroleField.ROLE);
                fireNameAndOrTitleChangeOnRole();
            }
        }
    }

    private void fireNameAndOrTitleChangeOnRole() {
        nameListenerFire();
        titleListenerFire();
    }

    /**
     * Get the user field rules.
     *
     * @return the rules
     */
    public Rules getUserRules() {
        return userRules;
    }

    /**
     * Get the parent Entity associated with this entity.
     *
     * @return the User entity
     */
    public User getParent() {
        return user.get();
    }

    /**
     * Set the parent (User) Entity associated with this entity. Called from the
     * parent entity as part of the addUserrole method
     *
     * @param e the parent user entity
     */
    protected void linkToParent(User e) {
        ensureEditing();
        if (user.set(e)) {
            fireFieldChange(UserroleField.USER);
            fireNameAndOrTitleChangeOnUser();
        }
    }

    /**
     * Clear the parent (User) Entity associated with this entity. Called from
     * the parent entity as part of the removeUserrole method
     */
    protected void unlinkFromParent() {
        ensureEditing();
        if (user.set()) {
            fireFieldChange(UserroleField.USER);
            fireNameAndOrTitleChangeOnUser();
        }
    }

    private void fireNameAndOrTitleChangeOnUser() {
    }

    /**
     * Get the id.
     *
     * @return the id
     */
    public final int getId() {
        return id;
    }

    /**
     * Get the createdby.
     *
     * @return the createdby
     */
    public final String getCreatedby() {
        return createdby;
    }

    /**
     * Get the createdon.
     *
     * @return the createdon
     */
    public final Timestamp getCreatedon() {
        return createdon;
    }

    /**
     * Get the updatedby.
     *
     * @return the updatedby
     */
    public final String getUpdatedby() {
        return updatedby;
    }

    /**
     * Get the updatedon.
     *
     * @return the updatedon
     */
    public final Timestamp getUpdatedon() {
        return updatedon;
    }
    
    @Override
    protected final void entitySaveState() {
        role.saveState();
        user.saveState();
    }
    
    @Override
    protected final void entityRestoreState() {
        role.restoreState();
        user.restoreState();
    }
    
    @Override
    protected final void entityRemove() {
        getParent().removeUserrole(this);
    }
    
    @Override
    protected final void entityLoad(EntityFields data) {
        role.set((Integer) data.get("role"));
        user.set((Integer) data.get("user"));
        id = (Integer) data.get("id");
        createdby = (String) data.get("createdby");
        try {
            createdon.setDateUsingSQLString((String) data.get("createdon"));
        } catch (BadFormatException ex) {
            throw new LogicException("Load reported bad Timestamp format - should never happen!!");
        }
        updatedby = (String) data.get("updatedby");
        try {
            updatedon.setDateUsingSQLString((String) data.get("updatedon"));
        } catch (BadFormatException ex) {
            throw new LogicException("Load reported bad Timestamp format - should never happen!!");
        }
    }
    
    @Override
    protected final void entityCopy(Userrole from) {
    }
    
    @Override
    protected final boolean entityDiffs(EntityFields data) {
        if (role.isDirty()) {
            int idrefRole = role.getPK();
            if (idrefRole < 0) {
                role.get().save(new StringBuilder());
                idrefRole = role.get().getPK();
                if (idrefRole < 0) {
                    return false;
                }
            }
            data.put("role", idrefRole);
        }
        if (user.isDirty()) {
            int idrefUser = user.getPK();
            if (idrefUser < 0) {
                user.get().save(new StringBuilder());
                idrefUser = user.get().getPK();
                if (idrefUser < 0) {
                    return false;
                }
            }
            data.put("user", idrefUser);
        }
        return true;
    }
    
    @Override
    protected final boolean entityValues(EntityFields data) {
        int idrefRole = role.getPK();
        if (idrefRole < 0) {
            role.get().save(new StringBuilder());
            idrefRole = role.get().getPK();
            if (idrefRole < 0) {
                return false;
            }
        }
        data.put("role", idrefRole);
        int idrefUser = user.getPK();
        if (idrefUser < 0) {
            user.get().save(new StringBuilder());
            idrefUser = user.get().getPK();
            if (idrefUser < 0) {
                return false;
            }
        }
        data.put("user", idrefUser);
        return true;
    }

    /**
     * Get the Userrole Entity Manager
     *
     * @return the Userrole Entity Manager
     */
    public static Userrole.EM getEM() {
        return Lookup.getDefault().lookup(Userrole.EM.class);
    }

    /**
     * The Userrole Entity Manager
     */
    @ServiceProvider(service = Userrole.EM.class)
    public static class EM extends EntityManager<Integer, Userrole, User> {
        
        private static int tpk = -1;

        /**
         * Constructor.
         */
        public EM() {
            super("Userrole");
        }
        
        @Override
        protected final void link2parent(Userrole e, User parent) {
            parent.addUserrole(e);
        }
        
        @Override
        protected final Userrole createNewEntity() {
            return new Userrole(tpk--, this);
        }
        
        @Override
        protected final Userrole createNewEntity(Integer pk) {
            return new Userrole(pk, this);
        }
        
        @Override
        protected final EntityPersistenceProvider createEntityPersistenceProvider() {
            return EntityPersistenceProviderManager.getEntityPersistenceProvider("authentication", "Userrole");
        }
        
        @Override
        protected boolean isPersistent(Integer pkey) {
            return pkey > 0;
        }
    }

    /**
     * Get the set of all Userroles.
     *
     * @return the set of all Userroles
     */
    public static List<Userrole> getAllUserroles() {
        List<Userrole> list = new ArrayList<>();
        User.getAllUsers().stream()
                .forEach(parent -> list.addAll(parent.getUserroles()));
        return list;
    }
    
    @Override
    public String getDisplayName() {
        return MessageFormat.format("{0}", formatRole());
    }
    
    @Override
    public String getDisplayTitle() {
        return getDisplayName();
    }
    
    @Override
    public String getSortKey() {
        return getDisplayTitle();
    }

    /**
     * Get the formatted text version of role field
     *
     * @return the formatted String
     */
    public String formatRole() {
        return getRole() != null ? getRole().getDisplayTitle() : "undefined";
    }

    /**
     * Get the formatted text version of user field
     *
     * @return the formatted String
     */
    public String formatUser() {
        return getParent() != null ? getParent().getDisplayName() : "undefined";
    }

    /**
     * Get the formatted text version of id field
     *
     * @return the formatted String
     */
    public String formatId() {
        return Integer.toString(getId());
    }

    /**
     * Get the formatted text version of createdby field
     *
     * @return the formatted String
     */
    public String formatCreatedby() {
        return getCreatedby();
    }

    /**
     * Get the formatted text version of createdon field
     *
     * @return the formatted String
     */
    public String formatCreatedon() {
        return getCreatedon().toString();
    }

    /**
     * Get the formatted text version of updatedby field
     *
     * @return the formatted String
     */
    public String formatUpdatedby() {
        return getUpdatedby();
    }

    /**
     * Get the formatted text version of updatedon field
     *
     * @return the formatted String
     */
    public String formatUpdatedon() {
        return getUpdatedon().toString();
    }

    /**
     * Get the formatted text version of id field left padded with zeros if less
     * than minimum size.
     *
     * @param minDigits minimum size
     * @return the formatted String
     */
    public String formatId(int minDigits) {
        return StringX.padLeft(formatId(), minDigits, '0');
    }

    /**
     * Get the formatted text version of createdby field left padded with zeros
     * if less than minimum size.
     *
     * @param minChars minimum size
     * @return the formatted String
     */
    public String formatCreatedby(int minChars) {
        return StringX.padLeftIfInt(formatCreatedby(), minChars, '0');
    }

    /**
     * Get the formatted text version of updatedby field left padded with zeros
     * if less than minimum size.
     *
     * @param minChars minimum size
     * @return the formatted String
     */
    public String formatUpdatedby(int minChars) {
        return StringX.padLeftIfInt(formatUpdatedby(), minChars, '0');
    }
    
    private class ReferencedEntityTitleChangeListener extends Listener<SimpleEventParams> {
        
        public ReferencedEntityTitleChangeListener(String name) {
            super(name);
        }
        
        @Override
        public void action(SimpleEventParams p) {
            nameListenerFire();
            titleListenerFire();
        }
    }
}
