/*
 * Copyright 2015-2017 Richard Linsdale.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package uk.theretiredprogrammer.nbpcglibrary.authentication.dataobjects;

import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;
import org.openide.util.Lookup;
import org.openide.util.lookup.ServiceProvider;
import static uk.theretiredprogrammer.nbpcglibrary.authentication.dataobjects.Role.RoleField;
import uk.theretiredprogrammer.nbpcglibrary.api.*;
import uk.theretiredprogrammer.nbpcglibrary.common.*;
import uk.theretiredprogrammer.nbpcglibrary.data.entity.*;
import uk.theretiredprogrammer.nbpcglibrary.data.entityreferences.*;

/**
 * The Role Entity.
 *
 * (Class generated by NetBeans Platform Code Generator tools using script.xml.
 * Do not edit this file. Apply any changes to the definition file and
 * regenerate all files.)
 *
 * @author Richard Linsdale (richard at theretiredprogrammer.uk)
 */
public class Role extends Entity<Integer, Role, Application, RoleField> {

    /**
     * the Role field identifiers
     */
    public enum RoleField {
        /**
         * the role field
         */
        ROLE,
        /**
         * the application field
         */
        APPLICATION,
    }
    
    private final Rules entityRules = new Rules();
    private String role = "";
    private String roleOriginal;
    private final Rules roleRules = new Rules();
    private final EntityReference<Integer, Application, ApplicationRoot> application;
    private final Rules applicationRules = new Rules();
    private int id = 0;
    private String createdby = "";
    private final Timestamp createdon = new Timestamp();
    private String updatedby = "";
    private final Timestamp updatedon = new Timestamp();

    /**
     * Constructor - Role.
     *
     * @param id the unique id for this entity
     * @param em - the entity manager for this entity type
     */
    public Role(int id, Role.EM em) {
        super("Role[" + Integer.toString(id) + "]", "key", em);
        this.id = id;
        application = new EntityReference<>("Role>Application", Application.getEM(), new ReferencedEntityTitleChangeListener("Role>Application"));
        addRule(applicationRules, application.getDefinedRule());
        addRule(roleRules, new RoleMinRule());
        addRule(roleRules, new RoleMaxRule());
        checkRulesAtLoad(new StringBuilder());
    }
    
    @Override
    public boolean isPersistent() {
        return id > 0;
    }
    
    @Override
    public final Integer getPK() {
        return getId();
    }

    /**
     * Get all rules for this entity
     *
     * @return the set of rules
     */
    public final Rules getEntityRules() {
        return entityRules;
    }
    
    @Override
    public final String instanceDescription() {
        return "".equals(role)
                ? LogBuilder.instanceDescription(this, Integer.toString(getId()))
                : LogBuilder.instanceDescription(this, Integer.toString(getId()) + "-" + role);
    }
    
    private class RoleMinRule extends Rule {
        
        public RoleMinRule() {
            super("Too short");
        }
        
        @Override
        public boolean ruleCheck() {
            return role.length() >= 1;
        }
    }
    
    private class RoleMaxRule extends Rule {
        
        public RoleMaxRule() {
            super("Too long");
        }
        
        @Override
        public boolean ruleCheck() {
            return role.length() <= 100;
        }
    }

    /**
     * Get the role field rules.
     *
     * @return the rules
     */
    public Rules getRoleRules() {
        return roleRules;
    }

    /**
     * Get the role.
     *
     * @return the role
     */
    public final String getRole() {
        return role;
    }

    /**
     * Define the Role.
     *
     * @param role the role
     */
    public void setRole(String role) {
        if (!this.role.equals(role)) {
            ensureEditing();
            this.role = role;
            fireFieldChange(RoleField.ROLE);
            fireNameAndOrTitleChangeOnRole();
        }
    }

    private void fireNameAndOrTitleChangeOnRole() {
        nameListenerFire();
        titleListenerFire();
    }

    /**
     * Get the application field rules.
     *
     * @return the rules
     */
    public Rules getApplicationRules() {
        return applicationRules;
    }

    /**
     * Get the parent Entity associated with this entity.
     *
     * @return the Application entity
     */
    public Application getParent() {
        return application.get();
    }

    /**
     * Set the parent (Application) Entity associated with this entity. Called
     * from the parent entity as part of the addRole method
     *
     * @param e the parent application entity
     */
    protected void linkToParent(Application e) {
        ensureEditing();
        if (application.set(e)) {
            fireFieldChange(RoleField.APPLICATION);
            fireNameAndOrTitleChangeOnApplication();
        }
    }

    /**
     * Clear the parent (Application) Entity associated with this entity. Called
     * from the parent entity as part of the removeRole method
     */
    protected void unlinkFromParent() {
        ensureEditing();
        if (application.set()) {
            fireFieldChange(RoleField.APPLICATION);
            fireNameAndOrTitleChangeOnApplication();
        }
    }

    private void fireNameAndOrTitleChangeOnApplication() {
        titleListenerFire();
    }

    /**
     * Get the id.
     *
     * @return the id
     */
    public final int getId() {
        return id;
    }

    /**
     * Get the createdby.
     *
     * @return the createdby
     */
    public final String getCreatedby() {
        return createdby;
    }

    /**
     * Get the createdon.
     *
     * @return the createdon
     */
    public final Timestamp getCreatedon() {
        return createdon;
    }

    /**
     * Get the updatedby.
     *
     * @return the updatedby
     */
    public final String getUpdatedby() {
        return updatedby;
    }

    /**
     * Get the updatedon.
     *
     * @return the updatedon
     */
    public final Timestamp getUpdatedon() {
        return updatedon;
    }
    
    @Override
    protected final void entitySaveState() {
        roleOriginal = role;
        application.saveState();
    }
    
    @Override
    protected final void entityRestoreState() {
        role = roleOriginal;
        application.restoreState();
    }
    
    @Override
    protected final void entityRemove() {
        {
            Userrole.EM em = Userrole.getEM();
            em.getEntityPersistenceProvider().find("role", getPK()).stream().forEach((pk) -> {
                em.get(pk).remove();
            });
        }
        getParent().removeRole(this);
    }
    
    @Override
    protected final void entityLoad(EntityFields data) {
        role = (String) data.get("role");
        application.set((Integer) data.get("application"));
        id = (Integer) data.get("id");
        createdby = (String) data.get("createdby");
        try {
            createdon.setDateUsingSQLString((String) data.get("createdon"));
        } catch (BadFormatException ex) {
            throw new LogicException("Load reported bad Timestamp format - should never happen!!");
        }
        updatedby = (String) data.get("updatedby");
        try {
            updatedon.setDateUsingSQLString((String) data.get("updatedon"));
        } catch (BadFormatException ex) {
            throw new LogicException("Load reported bad Timestamp format - should never happen!!");
        }
    }
    
    @Override
    protected final void entityCopy(Role from) {
        role = from.getRole();
    }
    
    @Override
    protected final boolean entityDiffs(EntityFields data) {
        if (!role.equals(roleOriginal)) {
            data.put("role", role);
        }
        if (application.isDirty()) {
            int idrefApplication = application.getPK();
            if (idrefApplication < 0) {
                application.get().save(new StringBuilder());
                idrefApplication = application.get().getPK();
                if (idrefApplication < 0) {
                    return false;
                }
            }
            data.put("application", idrefApplication);
        }
        return true;
    }
    
    @Override
    protected final boolean entityValues(EntityFields data) {
        data.put("role", role);
        int idrefApplication = application.getPK();
        if (idrefApplication < 0) {
            application.get().save(new StringBuilder());
            idrefApplication = application.get().getPK();
            if (idrefApplication < 0) {
                return false;
            }
        }
        data.put("application", idrefApplication);
        return true;
    }

    /**
     * Get the Role Entity Manager
     *
     * @return the Role Entity Manager
     */
    public static Role.EM getEM() {
        return Lookup.getDefault().lookup(Role.EM.class);
    }

    /**
     * The Role Entity Manager
     */
    @ServiceProvider(service = Role.EM.class)
    public static class EM extends EntityManager<Integer, Role, Application> {
        
        private static int tpk = -1;

        /**
         * Constructor.
         */
        public EM() {
            super("Role");
        }
        
        @Override
        protected final void link2parent(Role e, Application parent) {
            parent.addRole(e);
        }
        
        @Override
        protected final Role createNewEntity() {
            return new Role(tpk--, this);
        }
        
        @Override
        protected final Role createNewEntity(Integer pk) {
            return new Role(pk, this);
        }
        
        @Override
        protected final EntityPersistenceProvider createEntityPersistenceProvider() {
            return EntityPersistenceProviderManager.getEntityPersistenceProvider("authentication", "Role");
        }
        
        @Override
        protected boolean isPersistent(Integer pkey) {
            return pkey > 0;
        }
    }

    /**
     * Get the set of all Roles.
     *
     * @return the set of all Roles
     */
    public static List<Role> getAllRoles() {
        List<Role> list = new ArrayList<>();
        Application.getAllApplications().stream()
                .forEach(parent -> list.addAll(parent.getRoles()));
        return list;
    }
    
    @Override
    public String getDisplayName() {
        return MessageFormat.format("{0}", formatRole());
    }
    
    @Override
    public String getDisplayTitle() {
        return MessageFormat.format("{0} for {1}", formatRole(), formatApplication());
    }
    
    @Override
    public String getSortKey() {
        return getDisplayTitle();
    }

    /**
     * Get the formatted text version of role field
     *
     * @return the formatted String
     */
    public String formatRole() {
        return getRole();
    }

    /**
     * Get the formatted text version of application field
     *
     * @return the formatted String
     */
    public String formatApplication() {
        return getParent() != null ? getParent().getDisplayName() : "undefined";
    }

    /**
     * Get the formatted text version of id field
     *
     * @return the formatted String
     */
    public String formatId() {
        return Integer.toString(getId());
    }

    /**
     * Get the formatted text version of createdby field
     *
     * @return the formatted String
     */
    public String formatCreatedby() {
        return getCreatedby();
    }

    /**
     * Get the formatted text version of createdon field
     *
     * @return the formatted String
     */
    public String formatCreatedon() {
        return getCreatedon().toString();
    }

    /**
     * Get the formatted text version of updatedby field
     *
     * @return the formatted String
     */
    public String formatUpdatedby() {
        return getUpdatedby();
    }

    /**
     * Get the formatted text version of updatedon field
     *
     * @return the formatted String
     */
    public String formatUpdatedon() {
        return getUpdatedon().toString();
    }

    /**
     * Get the formatted text version of role field left padded with zeros if
     * less than minimum size.
     *
     * @param minChars minimum size
     * @return the formatted String
     */
    public String formatRole(int minChars) {
        return StringX.padLeftIfInt(formatRole(), minChars, '0');
    }

    /**
     * Get the formatted text version of id field left padded with zeros if less
     * than minimum size.
     *
     * @param minDigits minimum size
     * @return the formatted String
     */
    public String formatId(int minDigits) {
        return StringX.padLeft(formatId(), minDigits, '0');
    }

    /**
     * Get the formatted text version of createdby field left padded with zeros
     * if less than minimum size.
     *
     * @param minChars minimum size
     * @return the formatted String
     */
    public String formatCreatedby(int minChars) {
        return StringX.padLeftIfInt(formatCreatedby(), minChars, '0');
    }

    /**
     * Get the formatted text version of updatedby field left padded with zeros
     * if less than minimum size.
     *
     * @param minChars minimum size
     * @return the formatted String
     */
    public String formatUpdatedby(int minChars) {
        return StringX.padLeftIfInt(formatUpdatedby(), minChars, '0');
    }
    
    private class ReferencedEntityTitleChangeListener extends Listener<SimpleEventParams> {
        
        public ReferencedEntityTitleChangeListener(String name) {
            super(name);
        }
        
        @Override
        public void action(SimpleEventParams p) {
            titleListenerFire();
        }
    }
}
