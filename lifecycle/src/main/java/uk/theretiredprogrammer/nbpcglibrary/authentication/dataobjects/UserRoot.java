/*
 * Copyright 2015-2017 Richard Linsdale.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package uk.theretiredprogrammer.nbpcglibrary.authentication.dataobjects;

import java.io.IOException;
import java.util.List;
import org.openide.util.Lookup;
import org.openide.util.lookup.ServiceProvider;
import uk.theretiredprogrammer.nbpcglibrary.common.Listener;
import uk.theretiredprogrammer.nbpcglibrary.common.LogBuilder;
import uk.theretiredprogrammer.nbpcglibrary.data.entity.*;
import uk.theretiredprogrammer.nbpcglibrary.data.entityreferences.*;

/**
 * The UserRoot Object
 *
 * (Class generated by NetBeans Platform Code Generator tools using script.xml.
 * Do not edit this file. Apply any changes to the definition file and
 * regenerate all files.)
 *
 * @author Richard Linsdale (richard at theretiredprogrammer.uk)
 */
@ServiceProvider(service = UserRoot.class)
public class UserRoot extends CoreEntity {

    /**
     * the UserRoot field identifiers
     */
    public enum UserRootField {
        /**
         * the users collection
         */
        USERS,
    }
    
    private final EntityReferenceSet<Integer, User, UserRoot> users;
    
    @Override
    public final String instanceDescription() {
        return LogBuilder.instanceDescription(this);
    }

    /**
     * Get the UserRoot entity.
     *
     * @return the UserRoot entity
     */
    public static UserRoot get() {
        return Lookup.getDefault().lookup(UserRoot.class);
    }

    /**
     * Constructor.
     *
     * @throws IOException if problem with obtaining/parsing data
     */
    public UserRoot() throws IOException {
        super("UserRoot", "folder_user");
        users = new EntityReferenceSet<>(instanceDescription() + ">Users", User.EM.class);
        users.load();
    }

    /**
     * Add a User to the root's list
     *
     * @param e the user
     */
    public void addUser(User e) {
        users.add(e);
    }

    /**
     * Remove a User from the root's list
     *
     * @param e the User
     */
    public void removeUser(User e) {
        users.remove(e);
    }

    /**
     * Add set listener to users collections
     *
     * @param listener the set change listener to add
     */
    public void addUserSetChangeListener(Listener<SetChangeEventParams> listener) {
        users.addSetListener(listener);
    }

    /**
     * remove set listener to users collections
     *
     * @param listener the set change listener to add
     */
    public void removeUserSetChangeListener(Listener<SetChangeEventParams> listener) {
        users.removeSetListener(listener);
    }

    /**
     * Add set listener to requested collection field (set)
     *
     * @param listener the set change listener to be added
     */
    public static void addUsersSetChangeListeners(Listener<SetChangeEventParams> listener) {
        get().users.addSetListener(listener);
    }

    /**
     * Remove set listener from requested collection field (set)
     *
     * @param listener the set change listener to be removed
     */
    public static void removeUsersSetChangeListeners(Listener<SetChangeEventParams> listener) {
        get().users.removeSetListener(listener);
    }

    /**
     * Get the list of Users
     *
     * @return the list of Users
     */
    public List<User> getUsers() {        
        return users.get();
    }
    
    @Override
    protected final void entityRestoreState() {
        users.restoreState();
    }
    
    @Override
    public String getDisplayName() {
        return "Users";
    }
}
