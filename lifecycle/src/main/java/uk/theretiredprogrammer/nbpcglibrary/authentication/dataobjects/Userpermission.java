/*
 * Copyright 2015-2017 Richard Linsdale.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package uk.theretiredprogrammer.nbpcglibrary.authentication.dataobjects;

import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;
import org.openide.util.Lookup;
import org.openide.util.lookup.ServiceProvider;
import static uk.theretiredprogrammer.nbpcglibrary.authentication.dataobjects.Userpermission.UserpermissionField;
import uk.theretiredprogrammer.nbpcglibrary.api.*;
import uk.theretiredprogrammer.nbpcglibrary.common.*;
import uk.theretiredprogrammer.nbpcglibrary.data.entity.*;
import uk.theretiredprogrammer.nbpcglibrary.data.entityreferences.*;

/**
 * The Userpermission Entity.
 *
 * (Class generated by NetBeans Platform Code Generator tools using script.xml.
 * Do not edit this file. Apply any changes to the definition file and
 * regenerate all files.)
 *
 * @author Richard Linsdale (richard at theretiredprogrammer.uk)
 */
public class Userpermission extends Entity<Integer, Userpermission, User, UserpermissionField> {

    /**
     * the Userpermission field identifiers
     */
    public enum UserpermissionField {
        /**
         * the permission field
         */
        PERMISSION,
        /**
         * the user field
         */
        USER,
    }
    
    private final Rules entityRules = new Rules();
    private final EntityReference<Integer, Permission, Application> permission;
    private final Rules permissionRules = new Rules();
    private final EntityReference<Integer, User, UserRoot> user;
    private final Rules userRules = new Rules();
    private int id = 0;
    private String createdby = "";
    private final Timestamp createdon = new Timestamp();
    private String updatedby = "";
    private final Timestamp updatedon = new Timestamp();

    /**
     * Constructor - Userpermission.
     *
     * @param id the unique id for this entity
     * @param em - the entity manager for this entity type
     */
    public Userpermission(int id, Userpermission.EM em) {
        super("Userpermission[" + Integer.toString(id) + "]", "thumb_up", em);
        this.id = id;
        permission = new EntityReference<>("Userpermission>Permission", Permission.getEM(), new ReferencedEntityTitleChangeListener("Userpermission>Permission"));
        addRule(permissionRules, permission.getDefinedRule());
        user = new EntityReference<>("Userpermission>User", User.getEM());
        addRule(userRules, user.getDefinedRule());
        checkRulesAtLoad(new StringBuilder());
    }
    
    @Override
    public boolean isPersistent() {
        return id > 0;
    }
    
    @Override
    public final Integer getPK() {
        return getId();
    }

    /**
     * Get all rules for this entity
     *
     * @return the set of rules
     */
    public final Rules getEntityRules() {
        return entityRules;
    }
    
    @Override
    public final String instanceDescription() {
        if (permission == null) {
            return LogBuilder.instanceDescription(this, Integer.toString(getId()));
        }
        Permission e = permission.getNoLoad();
        return e != null
                ? LogBuilder.instanceDescription(this, Integer.toString(getId()) + ":" + e.instanceDescription())
                : LogBuilder.instanceDescription(this, Integer.toString(getId()));
    }

    /**
     * Get the permission field rules.
     *
     * @return the rules
     */
    public Rules getPermissionRules() {
        return permissionRules;
    }

    /**
     * Get the Permission Entity associated with this entity.
     *
     * @return the Permission entity
     */
    public Permission getPermission() {
        return permission.get();
    }

    /**
     * Set the Permission Entity associated with this entity.
     *
     * @param e the permission entity
     */
    public void setPermission(Permission e) {
        if (e == null) {
            if (permission.getPK() != null) {
                ensureEditing();
                if (permission.set()) {
                    fireFieldChange(UserpermissionField.PERMISSION);
                    fireNameAndOrTitleChangeOnPermission();
                }
            }
        } else if (!e.getPK().equals(permission.getPK())) {
            ensureEditing();
            if (permission.set(e.getPK())) {
                fireFieldChange(UserpermissionField.PERMISSION);
                fireNameAndOrTitleChangeOnPermission();
            }
        }
    }

    private void fireNameAndOrTitleChangeOnPermission() {
        nameListenerFire();
        titleListenerFire();
    }

    /**
     * Get the user field rules.
     *
     * @return the rules
     */
    public Rules getUserRules() {
        return userRules;
    }

    /**
     * Get the parent Entity associated with this entity.
     *
     * @return the User entity
     */
    public User getParent() {
        return user.get();
    }

    /**
     * Set the parent (User) Entity associated with this entity. Called from the
     * parent entity as part of the addUserpermission method
     *
     * @param e the parent user entity
     */
    protected void linkToParent(User e) {
        ensureEditing();
        if (user.set(e)) {
            fireFieldChange(UserpermissionField.USER);
            fireNameAndOrTitleChangeOnUser();
        }
    }

    /**
     * Clear the parent (User) Entity associated with this entity. Called from
     * the parent entity as part of the removeUserpermission method
     */
    protected void unlinkFromParent() {
        ensureEditing();
        if (user.set()) {
            fireFieldChange(UserpermissionField.USER);
            fireNameAndOrTitleChangeOnUser();
        }
    }

    private void fireNameAndOrTitleChangeOnUser() {
    }

    /**
     * Get the id.
     *
     * @return the id
     */
    public final int getId() {
        return id;
    }

    /**
     * Get the createdby.
     *
     * @return the createdby
     */
    public final String getCreatedby() {
        return createdby;
    }

    /**
     * Get the createdon.
     *
     * @return the createdon
     */
    public final Timestamp getCreatedon() {
        return createdon;
    }

    /**
     * Get the updatedby.
     *
     * @return the updatedby
     */
    public final String getUpdatedby() {
        return updatedby;
    }

    /**
     * Get the updatedon.
     *
     * @return the updatedon
     */
    public final Timestamp getUpdatedon() {
        return updatedon;
    }
    
    @Override
    protected final void entitySaveState() {
        permission.saveState();
        user.saveState();
    }
    
    @Override
    protected final void entityRestoreState() {
        permission.restoreState();
        user.restoreState();
    }
    
    @Override
    protected final void entityRemove() {
        getParent().removeUserpermission(this);
    }
    
    @Override
    protected final void entityLoad(EntityFields data) {
        permission.set((Integer) data.get("permission"));
        user.set((Integer) data.get("user"));
        id = (Integer) data.get("id");
        createdby = (String) data.get("createdby");
        try {
            createdon.setDateUsingSQLString((String) data.get("createdon"));
        } catch (BadFormatException ex) {
            throw new LogicException("Load reported bad Timestamp format - should never happen!!");
        }
        updatedby = (String) data.get("updatedby");
        try {
            updatedon.setDateUsingSQLString((String) data.get("updatedon"));
        } catch (BadFormatException ex) {
            throw new LogicException("Load reported bad Timestamp format - should never happen!!");
        }
    }
    
    @Override
    protected final void entityCopy(Userpermission from) {
    }
    
    @Override
    protected final boolean entityDiffs(EntityFields data) {
        if (permission.isDirty()) {
            int idrefPermission = permission.getPK();
            if (idrefPermission < 0) {
                permission.get().save(new StringBuilder());
                idrefPermission = permission.get().getPK();
                if (idrefPermission < 0) {
                    return false;
                }
            }
            data.put("permission", idrefPermission);
        }
        if (user.isDirty()) {
            int idrefUser = user.getPK();
            if (idrefUser < 0) {
                user.get().save(new StringBuilder());
                idrefUser = user.get().getPK();
                if (idrefUser < 0) {
                    return false;
                }
            }
            data.put("user", idrefUser);
        }
        return true;
    }
    
    @Override
    protected final boolean entityValues(EntityFields data) {
        int idrefPermission = permission.getPK();
        if (idrefPermission < 0) {
            permission.get().save(new StringBuilder());
            idrefPermission = permission.get().getPK();
            if (idrefPermission < 0) {
                return false;
            }
        }
        data.put("permission", idrefPermission);
        int idrefUser = user.getPK();
        if (idrefUser < 0) {
            user.get().save(new StringBuilder());
            idrefUser = user.get().getPK();
            if (idrefUser < 0) {
                return false;
            }
        }
        data.put("user", idrefUser);
        return true;
    }

    /**
     * Get the Userpermission Entity Manager
     *
     * @return the Userpermission Entity Manager
     */
    public static Userpermission.EM getEM() {
        return Lookup.getDefault().lookup(Userpermission.EM.class);
    }

    /**
     * The Userpermission Entity Manager
     */
    @ServiceProvider(service = Userpermission.EM.class)
    public static class EM extends EntityManager<Integer, Userpermission, User> {
        
        private static int tpk = -1;

        /**
         * Constructor.
         */
        public EM() {
            super("Userpermission");
        }
        
        @Override
        protected final void link2parent(Userpermission e, User parent) {
            parent.addUserpermission(e);
        }
        
        @Override
        protected final Userpermission createNewEntity() {
            return new Userpermission(tpk--, this);
        }
        
        @Override
        protected final Userpermission createNewEntity(Integer pk) {
            return new Userpermission(pk, this);
        }
        
        @Override
        protected final EntityPersistenceProvider createEntityPersistenceProvider() {
            return EntityPersistenceProviderManager.getEntityPersistenceProvider("authentication", "Userpermission");
        }
        
        @Override
        protected boolean isPersistent(Integer pkey) {
            return pkey > 0;
        }
    }

    /**
     * Get the set of all Userpermissions.
     *
     * @return the set of all Userpermissions
     */
    public static List<Userpermission> getAllUserpermissions() {
        List<Userpermission> list = new ArrayList<>();
        User.getAllUsers().stream()
                .forEach(parent -> list.addAll(parent.getUserpermissions()));
        return list;
    }
    
    @Override
    public String getDisplayName() {
        return MessageFormat.format("{0}", formatPermission());
    }
    
    @Override
    public String getDisplayTitle() {
        return getDisplayName();
    }
    
    @Override
    public String getSortKey() {
        return getDisplayTitle();
    }

    /**
     * Get the formatted text version of permission field
     *
     * @return the formatted String
     */
    public String formatPermission() {
        return getPermission() != null ? getPermission().getDisplayTitle() : "undefined";
    }

    /**
     * Get the formatted text version of user field
     *
     * @return the formatted String
     */
    public String formatUser() {
        return getParent() != null ? getParent().getDisplayName() : "undefined";
    }

    /**
     * Get the formatted text version of id field
     *
     * @return the formatted String
     */
    public String formatId() {
        return Integer.toString(getId());
    }

    /**
     * Get the formatted text version of createdby field
     *
     * @return the formatted String
     */
    public String formatCreatedby() {
        return getCreatedby();
    }

    /**
     * Get the formatted text version of createdon field
     *
     * @return the formatted String
     */
    public String formatCreatedon() {
        return getCreatedon().toString();
    }

    /**
     * Get the formatted text version of updatedby field
     *
     * @return the formatted String
     */
    public String formatUpdatedby() {
        return getUpdatedby();
    }

    /**
     * Get the formatted text version of updatedon field
     *
     * @return the formatted String
     */
    public String formatUpdatedon() {
        return getUpdatedon().toString();
    }

    /**
     * Get the formatted text version of id field left padded with zeros if less
     * than minimum size.
     *
     * @param minDigits minimum size
     * @return the formatted String
     */
    public String formatId(int minDigits) {
        return StringX.padLeft(formatId(), minDigits, '0');
    }

    /**
     * Get the formatted text version of createdby field left padded with zeros
     * if less than minimum size.
     *
     * @param minChars minimum size
     * @return the formatted String
     */
    public String formatCreatedby(int minChars) {
        return StringX.padLeftIfInt(formatCreatedby(), minChars, '0');
    }

    /**
     * Get the formatted text version of updatedby field left padded with zeros
     * if less than minimum size.
     *
     * @param minChars minimum size
     * @return the formatted String
     */
    public String formatUpdatedby(int minChars) {
        return StringX.padLeftIfInt(formatUpdatedby(), minChars, '0');
    }
    
    private class ReferencedEntityTitleChangeListener extends Listener<SimpleEventParams> {
        
        public ReferencedEntityTitleChangeListener(String name) {
            super(name);
        }
        
        @Override
        public void action(SimpleEventParams p) {
            nameListenerFire();
            titleListenerFire();
        }
    }
}
