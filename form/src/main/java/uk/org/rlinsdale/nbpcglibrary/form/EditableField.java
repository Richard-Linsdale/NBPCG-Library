/*
 * Copyright (C) 2014-2015 Richard Linsdale (richard.linsdale at blueyonder.co.uk).
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package uk.org.rlinsdale.nbpcglibrary.form;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import javax.swing.JComponent;
import uk.org.rlinsdale.nbpcglibrary.api.BadFormatException;

/**
 * Abstract Class representing an editable Field on a Form
 *
 * @author Richard Linsdale (richard.linsdale at blueyonder.co.uk)
 * @param <T> type of the data connecting to the backing Object
 */
public abstract class EditableField<T> extends Field<T> {

    private FieldActionListener actionListener;
    private final FieldFocusListener focusListener;
    private final ErrorMarker errorMarker;

    private T lastvaluesetinfield;
    private boolean inhibitListeneractions = false;

    /**
     * Constructor
     *
     * @param label the label text for this field
     * @param field the swing field component
     * @param additionalfield optional additional field (set to null if not
     * required)
     */
    protected EditableField(String label, JComponent field, JComponent additionalfield) {
        this(label, field, additionalfield, new ErrorMarker());
    }

    private EditableField(String label, JComponent field, JComponent additionalfield, ErrorMarker errorMarker) {
        super(label, field, additionalfield, errorMarker);
        this.errorMarker = errorMarker;
        field.addFocusListener(focusListener = new FieldFocusListener());
    }

    protected final ActionListener getActionListener() {
        return (actionListener = new FieldActionListener());
    }

    @Override
    protected final void updateFieldFromSource() {
        T value = getSourceValue();
        if (!value.equals(lastvaluesetinfield)) {
            lastvaluesetinfield = value;
            insertField(value);
        }
    }

    public final void updateFieldFromSource(boolean force) {
        if (force) {
            insertField(getSourceValue());
        } else {
            updateFieldFromSource();
        }
    }

    private void insertField(T value) {
        inhibitListeneractions = true;
        this.lastvaluesetinfield = value;
        setFieldValue(value);
        checkRules();
        inhibitListeneractions = false;
    }

    protected final void updateSourceFromField() {
        try {
            setSourceValue(getFieldValue());
        } catch (BadFormatException ex) {
            errorMarker.setError("Badly Formated Number");
        }
    }

    /**
     * check that the value has changed and if so then update the lastvalue
     * variable, and update the source
     *
     * @param value the new value to test
     */
    private void updateSourceFromFieldIfChange(T value) {
        if (!value.equals(lastvaluesetinfield)) {
            lastvaluesetinfield = value;
            setSourceValue(value);
            updateFieldFromSource(true); // and rewrite the field
            checkRules();
        }
    }

    /**
     * Set the value in the source
     *
     * @param value the value
     */
    abstract protected void setSourceValue(T value);

    /**
     * Get a value from the field
     *
     * @return the value of the field
     * @throws BadFormatException if field is not valid format for input type
     * required.
     */
    protected abstract T getFieldValue() throws BadFormatException;

    /**
     * Check if all rules in the field's rule set are valid, and update error
     * markers and error messages on the form.
     *
     * @return true if all rules are valid
     */
    protected boolean checkRules() {
        boolean res = sourceCheckRules();
        if (res) {
            errorMarker.clearError();
        } else {
            errorMarker.setError(getSourceErrorMessages());
        }
        return res;
    }

    /**
     * Check the rules for this field source.
     *
     * @return true if source is valid for all defined rules.
     */
    abstract protected boolean sourceCheckRules();

    /**
     * Get all error messages generated by rule failure of this field source.
     *
     * @return true if source is valid for all defined rules.
     */
    abstract protected String getSourceErrorMessages();

    private class FieldActionListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent ae) {
            if (!inhibitListeneractions) {
                try {
                    updateSourceFromFieldIfChange(getFieldValue());
                } catch (BadFormatException ex) {
                    errorMarker.setError("Badly Formated Number");
                }
            }
        }
    }

    private class FieldFocusListener implements FocusListener {

        @Override
        public void focusGained(FocusEvent fe) {
        }

        @Override
        public void focusLost(FocusEvent fe) {
            if (!inhibitListeneractions) {
                try {
                    updateSourceFromFieldIfChange(getFieldValue());
                } catch (BadFormatException ex) {
                    errorMarker.setError("Badly Formated Number");
                }
            }
        }
    }

    /**
     * Get the value of the field object (not the actual JComponent).
     * @return the value
     */
    abstract public T get();

    /**
     * Set the value of the field object (not the actual JComponent), will cause
     * the actual field to be updated.
     * @param value the value
     */
    abstract public void set(T value);

    /**
     * Reset the value of the field object (not the actual JComponent) to the
     * initial field value, will cause the actual field to be updated.
     */
    abstract public void reset();
}
